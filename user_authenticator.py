import os
import numpy as np
from audio_processing import analyze_audio, find_matching_profile
from profiles import load_profiles, save_profiles
from speech_handler import listen

class UserAuthenticator:
    """Felhaszn√°l√≥ azonos√≠t√°sa √©s sz≈±r≈ë finomhangol√°sa."""

    def __init__(self):
        """Bet√∂lti a profilokat az ind√≠t√°skor."""
        self.profiles = load_profiles()
        self.weight = 0.7  # Az √∫j hangminta s√∫lya
        self.active_filter = None  # Hangsz≈±r≈ë a beazonos√≠t√°s ut√°n

    def authenticate_user(self, pcm_data):
        """Az √©breszt≈ë sz√≥ felismer√©se ut√°n azonos√≠tja a felhaszn√°l√≥t √©s aktiv√°lja a sz≈±r≈ët."""
        profile = analyze_audio(pcm_data)  # Hangprofil elemz√©s
        match = find_matching_profile(profile, self.profiles)

        if match:
            os.system(f'say "√údv, {match}! Miben seg√≠thetek?"')
            self.update_existing_profile(match, profile)

            # üîµ **Sz≈±r≈ë aktiv√°l√°sa a beazonos√≠tott felhaszn√°l√≥ alapj√°n**
            self.active_filter = self.get_user_filter(match)
            return match  # Visszaadjuk a felhaszn√°l√≥ nev√©t

        return self.handle_new_user(profile)

    def get_user_filter(self, username):
        """A felhaszn√°l√≥ saj√°t MFCC √°tlagai alapj√°n be√°ll√≠tunk egy sz≈±r≈ët."""
        user_profile = self.profiles.get(username)
        if not user_profile:
            return None  # Ha nincs adat, ne sz≈±rj√ºnk

        # üìå Kisz√°m√≠tjuk az √°tlagos MFCC √©rt√©keket
        mean_mfcc = np.array(user_profile["mfcc_mean"])
        var_mfcc = np.array(user_profile["mfcc_var"])

        # üîπ Defini√°ljuk az elfogad√°si k√ºsz√∂b√∂t
        tolerance = np.sqrt(var_mfcc) * 2  # 2-szeres sz√≥r√°s tolerancia

        return {"mean": mean_mfcc, "tolerance": tolerance}

    def update_existing_profile(self, username, profile):
        """Friss√≠ti a megl√©v≈ë felhaszn√°l√≥ profilj√°t az √∫j hangmint√°val."""
        current_profile = self.profiles.get(username, {})

        for key in ["mfcc_mean", "mfcc_var"]:
            if key in profile:
                current_values = np.array(current_profile.get(key, []))
                new_values = np.array(profile[key])
                updated_values = (self.weight * new_values + (1 - self.weight) * current_values)
                current_profile[key] = updated_values.tolist()

        self.profiles[username] = current_profile
        save_profiles(self.profiles)
        print(f"A {username} profil friss√≠tve az √∫j hangminta alapj√°n.")

    def handle_new_user(self, profile):
        """√öj felhaszn√°l√≥t hoz l√©tre, ha az azonos√≠t√°s sikertelen."""
        os.system('say "Nem ismerlek. Szeretn√©d, ha menten√©m a hangod?"')
        response = listen()

        if response == "igen":
            os.system('say "Hogy h√≠vhatlak?"')
            name = listen()
            if name:
                self.profiles[name] = profile
                save_profiles(self.profiles)
                os.system(f'say "Profil elmentve. Miben seg√≠thetek, {name}?"')
                return name
        elif response == "nem":
            os.system('say "El√°rulod a neved, vagy elmondod, mit szeretn√©l?"')
            name = listen()
            if name in self.profiles:
                os.system(f'say "√údv √∫jra, {name}!"')
                self.update_existing_profile(name, profile)
                return name

        return None  # Ha nincs azonos√≠tott vagy √∫j felhaszn√°l√≥, None-t ad vissza.