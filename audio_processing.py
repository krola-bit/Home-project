import librosa
import numpy as np

def analyze_audio(pcm_data, sample_rate=16000):
    """Hangprofil elemz√©se MFCC alapj√°n."""
    if len(pcm_data) < 512:
        raise ValueError("Az audio adat t√∫l r√∂vid az elemz√©shez.")
    mfccs = librosa.feature.mfcc(y=pcm_data.astype(float), sr=sample_rate, n_fft = max(512, min(2048, len(pcm_data))))
    mfcc_mean = np.mean(mfccs, axis=1)  # √Åtlag√©rt√©k az MFCC-kb≈ël
    mfcc_var = np.var(mfccs, axis=1)   # Sz√≥r√°s az MFCC-kb≈ël
    return {"mfcc_mean": mfcc_mean.tolist(), "mfcc_var": mfcc_var.tolist()}

# Kezdeti tolerancia√©rt√©kek
mean_tolerance = 12.0
var_tolerance = 1000.0
hiba_szamlalo = 0  # H√°ny sikertelen felismer√©s t√∂rt√©nt?

def find_matching_profile(profile, profiles):
    global mean_tolerance, var_tolerance, hiba_szamlalo  # Glob√°lisan k√∂vetj√ºk az √©rt√©keket
    for name, stored_profile in profiles.items():
        if "mfcc_mean" not in stored_profile or "mfcc_var" not in stored_profile:
            continue
        mfcc_mean_diff = np.abs(np.array(profile["mfcc_mean"]) - np.array(stored_profile["mfcc_mean"]))
        mfcc_var_diff = np.abs(np.array(profile["mfcc_var"]) - np.array(stored_profile["mfcc_var"]))
        
        mean_diff_avg = np.mean(mfcc_mean_diff)
        var_diff_avg = np.mean(mfcc_var_diff)

        print(f"Profil ellen≈ërz√©se: {name}")
        print(f"üîç √Åtlagos mfcc_mean elt√©r√©s: {mean_diff_avg}, √Åtlagos mfcc_var elt√©r√©s: {var_diff_avg}")

        if mean_diff_avg <= mean_tolerance and var_diff_avg <= var_tolerance:
            print("‚úÖ Profil sikeresen beazonos√≠tva.")
            hiba_szamlalo = 0  # Ha sikeres azonos√≠t√°s t√∂rt√©nt, lenull√°zzuk a sz√°ml√°l√≥t
            return name
    
    # Ha nem volt tal√°lat, n√∂velj√ºk a toleranci√°t 3 sikertelen pr√≥b√°lkoz√°s ut√°n
    hiba_szamlalo += 1
    if hiba_szamlalo >= 3:
        mean_tolerance += 1.0  # Finomhangol√°s
        var_tolerance += 200.0
        print(f"‚ö†Ô∏è Tolerancia n√∂velve: mean_tolerance={mean_tolerance}, var_tolerance={var_tolerance}")
        hiba_szamlalo = 0  # Vissza√°ll√≠tjuk a sz√°ml√°l√≥t
    
    return None
